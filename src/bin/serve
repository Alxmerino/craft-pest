#!/usr/bin/env php
<?php

$opts = getopt("v::", ["vendor::"]);

$vendor = array_merge(array_filter([
    !empty($opts['v']) ? $opts['v'] : false,
    !empty($opts['vendor']) ? $opts['vendor'] : false,
    realpath(getcwd() . DIRECTORY_SEPARATOR . 'vendor'),
    realpath(__DIR__ . DIRECTORY_SEPARATOR . '..' . DIRECTORY_SEPARATOR . '../vendor'),
]));

if (empty($vendor[0])) {
    throw new \Exception('Could not find a valid vendor directory. Please specify a `-v=` or `-vendor=` value that points to the vendor directory');
}

$craftBasePath = realpath($vendor[0] . DIRECTORY_SEPARATOR . '..');

// ============
// The following is taken from craftcms/craft/web/index.php
// ============

// Define path constants
define('CRAFT_BASE_PATH', $craftBasePath);
define('CRAFT_VENDOR_PATH', CRAFT_BASE_PATH . '/vendor');

// Load Composer's autoloader
require_once CRAFT_VENDOR_PATH . '/autoload.php';

// Load dotenv?
if (class_exists('Dotenv\Dotenv') && file_exists(CRAFT_BASE_PATH . '/.env')) {
    Dotenv\Dotenv::create(CRAFT_BASE_PATH)->load();
}

// Define additional PHP constants
// (see https://craftcms.com/docs/3.x/config/#php-constants)
define('CRAFT_ENVIRONMENT', getenv('ENVIRONMENT') ?: 'production');
// ...

// Load Craft
/** @var craft\web\Application $app */
$app = require CRAFT_VENDOR_PATH . '/craftcms/cms/bootstrap/web.php';

// Set up custom request and response objects so we have more control
// over how things are handled
if (count($argv) < 2) {
    throw new \Exception('You must specify (at least) a URI as the final argument.');
}
$uri = $argv[count($argv)-1];
$app->setComponents([
    'request' => (new \markhuot\craftpest\web\Request)->setRaw([
        '_isConsoleRequest' => false,
        '_fullPath' => $uri,
        '_path' => $uri,
        '_fullUri' => $uri,
        '_ipAddress' => '::1',
        '_rawBody' => '',
        '_bodyParams' => [],
        '_queryParams' => [],
        '_hostInfo' => 'http://localhost:8080',
        '_hostName' => 'localhost',
        '_baseUrl' => '',
        '_scriptUrl' => '/index.php',
        '_scriptFile' => '',
        '_pathInfo' => $uri,
        '_url' => "/{$uri}",
        '_port' => 8080,
    ]),
    'response' => (new \markhuot\craftpest\web\Response)
]);
try {
    $app->run();
}
catch (\Exception $e) {
    $app->response->statusCode = $e->statusCode;
}

$psr7Response = new \GuzzleHttp\Psr7\Response(
    $app->response->statusCode,
    $app->response->headers->toArray(),
    $app->response->data,
);
echo \GuzzleHttp\Psr7\Message::toString($psr7Response);
